{"version":3,"sources":["components/Card/Card.components.js","components/Card-list/CardList.components.js","components/Search-box/search.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeHolder","handleChanger","onChange","type","placeholder","App","state","searchField","fetch","then","res","json","data","console","log","setState","this","filteredMonster","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kPAYeA,G,MAVF,SAACC,GACV,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,YACnE,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,UCMfC,EAVE,SAAAR,GACb,OACIA,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,yBAAKQ,IAAKR,EAAQC,IACd,kBAAC,EAAD,CAAMO,IAAKR,EAAQC,GAAID,QAASA,SCQjCS,EAbG,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cAC9B,OACI,yBAAKb,UAAU,gBACX,2BACIc,SAAUD,EACVE,KAAK,SACLC,YAAaJ,EACbZ,UAAU,aC0CXiB,E,kDA5Cb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACXV,SAAU,GACVW,YAAY,IAJG,E,gEAQG,IAAD,OACnBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACnB,SAAUgB,OAE7BC,QAAQC,IAAI,qB,+BAKJ,IAAD,SAC2BE,KAAKV,MAA/BV,EADD,EACCA,SAAUW,EADX,EACWA,YAEZU,EAAkBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC7CA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,yBAAK/B,UAAU,gBACb,+CACA,kBAAC,EAAD,CACEY,YAAY,iBACZC,cACE,SAAAoB,GAAM,EAAKN,SAAS,CAACR,YAAac,EAAEC,OAAOC,QAAQ,kBAAM,EAAKjB,YAGlE,yBAAKlB,UAAU,aACb,kBAAC,EAAD,CAAUQ,SAAUqB,U,GAtCZO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.ad56a1ce.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"monster\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card.components';\r\n\r\nconst CardList = props => {\r\n    return (\r\n        props.monsters.map(monster => (\r\n            <div key={monster.id}>\r\n                <Card key={monster.id} monster={monster} />\r\n            </div>\r\n        ))\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ placeHolder, handleChanger }) => {\r\n    return (\r\n        <div className=\"align-center\">\r\n            <input\r\n                onChange={handleChanger} \r\n                type=\"search\" \r\n                placeholder={placeHolder} \r\n                className=\"search\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/Card-list/CardList.components';\nimport SearchBox from './components/Search-box/search';\n// import USERS from './data/USERS';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField:''\n    }\n  } \n\n  componentDidMount () {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        this.setState({monsters: data})\n      })\n    console.log(\"did mount first\")   \n  }\n\n\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonster = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return(\n      <div className=\"align-center\">\n        <h1>Monster rolodex</h1>\n        <SearchBox \n          placeHolder=\"search monster\" \n          handleChanger={\n            e => {this.setState({searchField: e.target.value}, () => this.state)}\n          } \n        />\n        <div className=\"card-list\">\n          <CardList monsters={filteredMonster} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}